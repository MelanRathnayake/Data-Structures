class TreeNode {
    int key;
    TreeNode left, right;

    public TreeNode(int item) {
        key = item;
        left = right = null;
    }
}
class BinaryTree {
    TreeNode root;

    BinaryTree() {
        root = null;
    }

    // Insert a node
    TreeNode insert(TreeNode root, int key) {
        if (root == null) {
            root = new TreeNode(key);
            return root;
        }

        if (key < root.key) {
            root.left = insert(root.left, key);
        } else if (key > root.key) {
            root.right = insert(root.right, key);
        }

        return root;
    }

    // Delete a node
    TreeNode delete(TreeNode root, int key) {
        if (root == null) {
            return root;
        }

        if (key < root.key) {
            root.left = delete(root.left, key);
        } else if (key > root.key) {
            root.right = delete(root.right, key);
        } else {
            // Node with one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            root.key = minValue(root.right);

            // Delete the inorder successor
            root.right = delete(root.right, root.key);
        }

        return root;
    }

    // Get the inorder successor (smallest in the right subtree)
    int minValue(TreeNode root) {
        int minValue = root.key;
        while (root.left != null) {
            minValue = root.left.key;
            root = root.left;
        }
        return minValue;
    }

    // In-order traversal
    void inorder(TreeNode root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.key + " ");
            inorder(root.right);
        }
    }

    // Pre-order traversal
    void preorder(TreeNode root) {
        if (root != null) {
            System.out.print(root.key + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }

    // Post-order traversal
    void postorder(TreeNode root) {
        if (root != null) {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.key + " ");
        }
    }
}
public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        /* Inserting nodes */
        tree.root = tree.insert(tree.root, 50);
        tree.insert(tree.root, 30);
        tree.insert(tree.root, 20);
        tree.insert(tree.root, 40);
        tree.insert(tree.root, 70);
        tree.insert(tree.root, 60);
        tree.insert(tree.root, 80);

        // In-order traversal
        System.out.println("In-order traversal:");
        tree.inorder(tree.root);  // Output: 20 30 40 50 60 70 80
        System.out.println();

        // Pre-order traversal
        System.out.println("Pre-order traversal:");
        tree.preorder(tree.root);  // Output: 50 30 20 40 70 60 80
        System.out.println();

        // Post-order traversal
        System.out.println("Post-order traversal:");
        tree.postorder(tree.root);  // Output: 20 40 30 60 80 70 50
        System.out.println();

        // Deleting a node
        tree.root = tree.delete(tree.root, 20);
        System.out.println("In-order traversal after deleting 20:");
        tree.inorder(tree.root);  // Output: 30 40 50 60 70 80
    }
}
