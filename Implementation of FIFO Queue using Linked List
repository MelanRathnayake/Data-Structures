import java.util.NoSuchElementException;

// Node class to represent each element in the queue
class Node<T> {
    T data;
    Node<T> next;
    Node<T> prev;

    // Constructor to create a new node with given data
    public Node(T data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

// FIFO Queue implementation using a doubly linked list
public class LinkedListQueue<T> {
    private Node<T> front; // Front of the queue (head)
    private Node<T> rear;  // Rear of the queue (tail)

    // Constructor to create an empty queue
    public LinkedListQueue() {
        this.front = null;
        this.rear = null;
    }

    // Method to enqueue (add) an element to the rear of the queue
    public void enqueue(T data) {
        Node<T> newNode = new Node<>(data);
        if (isEmpty()) {
            front = newNode;
        } else {
            newNode.prev = rear;
            rear.next = newNode;
        }
        rear = newNode;
        System.out.println("Enqueued element: " + data);
    }

    // Method to dequeue (remove) an element from the front of the queue
    public T dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty. Cannot dequeue.");
        }
        T data = front.data;
        front = front.next;
        if (front == null) {
            rear = null; // Queue is now empty
        } else {
            front.prev = null;
        }
        System.out.println("Dequeued element: " + data);
        return data;
    }

    // Method to peek at the front element of the queue without removing it
    public T peek() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty. Cannot peek.");
        }
        return front.data;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return front == null;
    }

    // Method to print the elements of the queue
    public void printQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            Node<T> current = front;
            System.out.print("Queue elements: ");
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
            System.out.println();
        }
    }

    // Main method for testing the queue implementation
    public static void main(String[] args) {
        LinkedListQueue<Integer> queue = new LinkedListQueue<>();

        // Enqueue elements into the queue
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        // Print queue elements
        System.out.println("Queue after enqueues:");
        queue.printQueue();

        // Peek at the front element
        System.out.println("Front element: " + queue.peek());

        // Dequeue an element from the queue
        queue.dequeue();

        // Print queue elements after dequeue
        System.out.println("Queue after dequeue:");
        queue.printQueue();

        // Peek at the front element
        System.out.println("Front element: " + queue.peek());

        // Dequeue remaining elements from the queue
        queue.dequeue();
        queue.dequeue();

        // Try to dequeue from an empty queue
        // queue.dequeue(); // Uncommenting this line will throw NoSuchElementException

        // Print queue elements after all dequeues
        System.out.println("Queue after dequeuing all elements:");
        queue.printQueue();
    }
}
