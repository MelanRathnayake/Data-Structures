import java.util.Scanner;

// Class representing a node in a singly linked list
class Node<T> {
    T data;
    Node<T> next;

    // Constructor to create a new node
    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

// Singly linked list implementation
public class SinglyLinkedList<T> {
    private Node<T> head;

    // Constructor to create an empty linked list
    public SinglyLinkedList() {
        this.head = null;
    }

    // Method to add an element at the beginning of the list
    public void addFirst(T data) {
        Node<T> newNode = new Node<>(data);
        newNode.next = head; // The new node points to the current head
        head = newNode;      // Update head to be the new node
        System.out.println("Added element: " + data);
    }

    // Method to delete the first occurrence of an element
    public boolean delete(T data) {
        if (head == null) {
            System.out.println("Element not found: " + data); // List is empty
            return false;
        }
        if (head.data.equals(data)) {
            head = head.next; // Data found at head, update head
            System.out.println("Deleted element: " + data);
            return true;
        }
        Node<T> current = head;
        while (current.next != null && !current.next.data.equals(data)) {
            current = current.next; // Traverse to find the data
        }
        if (current.next == null) {
            System.out.println("Element not found: " + data); // Data not found
            return false;
        }
        current.next = current.next.next; // Bypass the node to delete
        System.out.println("Deleted element: " + data);
        return true;
    }

    // Method to search for an element in the list
    public boolean contains(T data) {
        Node<T> current = head;
        while (current != null) {
            if (current.data.equals(data)) {
                System.out.println("Element found: " + data); // Data found
                return true;
            }
            current = current.next;
        }
        System.out.println("Element not found: " + data); // Data not found
        return false;
    }

    // Method to print the elements of the list
    public void printList() {
        if (head == null) {
            System.out.println("List is empty.");
        } else {
            Node<T> current = head;
            while (current != null) {
                System.out.print(current.data + " -> ");
                current = current.next;
            }
            System.out.println("null");
        }
    }

    // Main method for testing the linked list implementation
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();

        // Populate the list with some initial elements
        list.addFirst(30);
        list.addFirst(20);
        list.addFirst(10);

        // Print the initial list
        System.out.println("Initial list:");
        list.printList();

        // Adding an element at the beginning
        System.out.print("Enter element you want to insert at the beginning: ");
        int addElement = scanner.nextInt();
        list.addFirst(addElement);

        // Print the list after insertion
        System.out.println("List after insertion:");
        list.printList();

        // Deleting an element
        System.out.print("Enter element you want to delete: ");
        int deleteElement = scanner.nextInt();
        list.delete(deleteElement);

        // Print the list after deletion
        System.out.println("List after deletion:");
        list.printList();

        // Searching for an element
        System.out.print("Enter element you want to search: ");
        int searchElement = scanner.nextInt();
        boolean found = list.contains(searchElement);
        System.out.println("Search result for element " + searchElement + ": " + found);

        scanner.close();
    }
}
